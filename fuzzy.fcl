FUNCTION_BLOCK crossroads

VAR_INPUT
	red: REAL;		// red queue list
	green:   REAL;		// arrival during green
END_VAR

VAR_OUTPUT
	ST:REAL; 		// signal timing
END_VAR

FUZZIFY red
	TERM veryfew := (0,1) (3,1) (6,0);
	TERM few := (3,0) (6,1) (10,0);
	TERM moderate := (6,0) (10,1) (14,0);
	TERM many := (12,0) (25,1) (26,1);
END_FUZZIFY

FUZZIFY green
	TERM veryfew := (0,1) (1,1) (3,0);
	TERM few := (1,0) (3,1) (5,0);
	TERM moderate := (3,0) (5,1) (7,0);
	TERM many := (6,0) (10,1) (11,1);
END_FUZZIFY

DEFUZZIFY ST
	TERM moredecrease := (-15,1) (-4,0);
	TERM decrease := (-6,0) (-4,1) (-1,0);
	TERM nochange := (-3,0) (0,1) (3,0);
	TERM increase := (1,0) (4,1) (6,0);
	TERM moreincrease := (4,0) (20,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

RULEBLOCK No1
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'max' accumulation method

	RULE 1 : IF red IS many AND green IS veryfew THEN ST IS moredecrease;
	RULE 2 : IF red IS many AND green IS few THEN ST IS moredecrease;
	RULE 4 : IF red IS moderate AND green IS veryfew THEN ST IS decrease;	
	RULE 5 : IF red IS moderate THEN ST IS nochange;
	RULE 6 : IF red IS veryfew AND green IS moderate THEN ST IS increase;
	RULE 7 : IF red IS few AND green IS many THEN ST IS moreincrease;
	RULE 8 : IF red IS veryfew AND green IS many THEN ST IS moreincrease;
	
END_RULEBLOCK

END_FUNCTION_BLOCK

